@charset "UTF-8";
/** IMPORT ORDER
* It's important that this order remains unchanged.
* However the partials inside the Fonts / Layout / Components can be changed.
*/
.social-link {
  color: white; }

.icon-facebook-with-circle {
  color: #3b5998; }

.icon-twitter-with-circle {
  color: #43bfe1; }

.icon-dribbble-with-circle {
  color: #ea4c89; }

.icon-github-with-circle {
  color: #171515; }

.icon-google-with-circle {
  color: #db4437; }

.icon-youtube-with-circle {
  color: #c4302b; }

body::before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100; }
  @media (min-width: 15.625em) {
    body::before {
      content: "mobile ≥ 250px (15.625em)"; } }
  @media (min-width: 30em) {
    body::before {
      content: "mobileLandscape ≥ 480px (30em)"; } }
  @media (min-width: 46.25em) {
    body::before {
      content: "tablet ≥ 740px (46.25em)"; } }
  @media (min-width: 61.25em) {
    body::before {
      content: "desktop ≥ 980px (61.25em)"; } }
  @media (min-width: 81.25em) {
    body::before {
      content: "wide ≥ 1300px (81.25em)"; } }

.u-no-scroll {
  overflow: hidden; }

.u-hide {
  display: none !important;
  visibility: hidden !important; }

.u-text-uppercase {
  text-transform: uppercase; }

.u-text-bold {
  font-weight: bold; }

.u-text-italic {
  font-style: italic; }

.u-text-left-align {
  text-align: left; }

.u-text-centered {
  text-align: center; }

.u-text-right-align {
  text-align: right; }

.u-text-justify {
  text-align: justify; }

.u-text-red {
  color: #e74c3c; }

.u-text-blue {
  color: #1894c4; }

.u-text-yellow {
  color: #f1c40f; }

.u-text-green {
  color: #27ae60; }

.u-text-orange {
  color: #d35400; }

.u-list-default {
  margin-left: 1rem; }

.u-list-reset {
  list-style: none;
  padding-left: 0; }

.u-coma-sep-items > li:not(:last-child):after {
  content: ','; }

/*! sanitize.css | CC0 Public Domain | github.com/jonathantneal/sanitize.css */
/*
 * Normalization
 */
:root {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow-y: scroll;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%; }

audio:not([controls]) {
  display: none; }

details {
  display: block; }

input[type="number"] {
  width: auto; }

input[type="search"] {
  -webkit-appearance: textfield; }
  input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

main {
  display: block; }

summary {
  display: block; }

pre {
  overflow: auto; }

progress {
  display: inline-block; }

small {
  font-size: 75%; }

template {
  display: none; }

textarea {
  overflow: auto; }

[hidden] {
  display: none; }

[unselectable] {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

/*
 * Universal inheritance
 */
*,
*::before,
*::after {
  box-sizing: inherit;
  text-decoration: inherit;
  vertical-align: inherit; }

* {
  color: inherit;
  font-family: "Roboto", sans-serif;
  font-size: inherit;
  font-style: inherit;
  line-height: inherit; }

/*
 * Opinionated defaults
 */
*,
*::before,
*::after {
  border-style: solid;
  border-width: 0; }

* {
  margin: 0;
  padding: 0; }

:root {
  box-sizing: border-box;
  cursor: default;
  font-family: sans-serif;
  line-height: 1.5;
  text-rendering: optimizeLegibility;
  vertical-align: top; }

button,
input,
textarea {
  background: transparent; }

code,
kbd,
pre,
samp {
  font-family: monospace, monospace; }

input {
  min-height: 1.5; }

nav ol,
nav ul {
  list-style: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

textarea {
  resize: vertical; }

::-moz-selection {
  background-color: #B3D4FC;
  text-shadow: none; }

::selection {
  background-color: #B3D4FC;
  text-shadow: none; }

.clear {
  clear: both; }

/* Suppress the focus outline on links that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events. */
[tabindex="-1"]:focus {
  outline: none !important; }

@media screen {
  [hidden~="screen"] {
    display: inherit; }
  [hidden~="screen"]:not(:active):not(:focus):not(:target) {
    clip: rect(0 0 0 0) !important;
    position: absolute !important; } }

/**
 * High-, page-level styling.
 *
 * 1. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 2. Ensure the page always fills at least the entire height of the viewport.
 * 3. Prevent certain mobile browsers from automatically zooming fonts.
 */
html {
  font-size: 16px;
  overflow-y: scroll;
  /* [1] */
  min-height: 100%;
  /* [2] */
  -webkit-text-size-adjust: 100%;
  /* [3] */
  -ms-text-size-adjust: 100%;
  /* [3] */
  font-family: "Roboto", Arial, sans-serif, serif;
  font-size: 100%;
  font-weight: 400;
  margin: 0 auto;
  text-align: left; }

body,
html {
  width: 100%;
  margin: 0;
  color: #303030; }

body {
  position: relative;
  font-size: 1em;
  padding-top: 3rem; }
  @media screen and (min-width: 46.25em) {
    body {
      font-size: 1em; } }
  @media screen and (min-width: 61.25em) {
    body {
      font-size: 1em; } }
  @media (min-width: 15.625em) and (max-width: 61.24em) {
    body.has-navbar {
      padding-top: calc(3rem + 3rem); } }
  @media (min-width: 61.25em) {
    body.has-navbar {
      padding-top: calc(3rem + 4rem); } }

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.2;
  margin-bottom: 1rem;
  -webkit-transition: all cubic-bezier(0.22, 0.61, 0.36, 1) 0.3s;
  transition: all cubic-bezier(0.22, 0.61, 0.36, 1) 0.3s; }

h1 {
  font-size: 2.0625em; }
  @media screen and (min-width: 46.25em) {
    h1 {
      font-size: 2.4375em; } }
  @media screen and (min-width: 61.25em) {
    h1 {
      font-size: 3.1875em; } }

h2 {
  font-size: 1.75em; }
  @media screen and (min-width: 46.25em) {
    h2 {
      font-size: 1.9375em; } }
  @media screen and (min-width: 61.25em) {
    h2 {
      font-size: 2.375em; } }

h3 {
  font-size: 1.4375em; }
  @media screen and (min-width: 46.25em) {
    h3 {
      font-size: 1.5625em; } }
  @media screen and (min-width: 61.25em) {
    h3 {
      font-size: 1.75em; } }

h4 {
  font-size: 1.1875em; }
  @media screen and (min-width: 46.25em) {
    h4 {
      font-size: 1.25em; } }
  @media screen and (min-width: 61.25em) {
    h4 {
      font-size: 1.3125em; } }

h5 {
  font-size: 1em; }
  @media screen and (min-width: 46.25em) {
    h5 {
      font-size: 1em; } }
  @media screen and (min-width: 61.25em) {
    h5 {
      font-size: 1em; } }

p, a, ul {
  font-family: "Roboto", Arial, sans-serif; }

img {
  height: auto;
  width: 100%; }

button {
  cursor: pointer; }

::-moz-selection {
  background: #1894c4;
  color: white;
  text-shadow: none; }

::selection {
  background: #1894c4;
  color: white;
  text-shadow: none; }

i {
  text-decoration: none; }

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }

.to-do {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  width: 100%;
  height: 10rem;
  font-size: 2.0625em;
  background: -webkit-repeating-linear-gradient(45deg, gold, gold 20px, #fff 20px, #fff 40px);
  background: repeating-linear-gradient(45deg, gold, gold 20px, #fff 20px, #fff 40px); }
  @media screen and (min-width: 46.25em) {
    .to-do {
      font-size: 2.4375em; } }
  @media screen and (min-width: 61.25em) {
    .to-do {
      font-size: 3.1875em; } }

.baseline:after {
  background: -webkit-repeating-linear-gradient(bottom, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05) 24px, rgba(0, 0, 0, 0.1) 24px, rgba(0, 0, 0, 0.1) 48px);
  background: repeating-linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05) 24px, rgba(0, 0, 0, 0.1) 24px, rgba(0, 0, 0, 0.1) 48px);
  content: '';
  position: absolute;
  display: block;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0; }

html,
body {
  width: 100%;
  height: 100%; }

body {
  margin: 0;
  padding: 0;
  background-color: tomato; }

.modal-wrapper--infos {
  position: absolute;
  bottom: 1rem;
  left: 1rem; }

.modal-wrapper--credits {
  position: absolute;
  bottom: 1rem;
  right: 1rem; }

.modal {
  position: absolute;
  bottom: 100%;
  left: 0;
  width: 20rem;
  height: 25rem;
  padding: 1rem;
  background-color: white;
  -webkit-transform: translateY(-1rem) scale(0);
          transform: translateY(-1rem) scale(0); }

.toggle-infos {
  padding: 7px;
  background-color: white;
  height: 3rem;
  border-radius: 3rem;
  padding: 4px 1rem;
  color: tomato; }

form {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  background-color: white;
  height: 3rem;
  border-radius: 3rem;
  padding: 4px; }
  form input {
    padding-left: .5rem;
    height: 100%;
    width: calc(100% - 5rem);
    outline: none;
    color: tomato; }
    form input::-webkit-input-placeholder {
      color: rgba(255, 99, 71, 0.5); }
    form input:-moz-placeholder {
      color: rgba(255, 99, 71, 0.5); }
    form input:-ms-input-placeholder {
      color: rgba(255, 99, 71, 0.5); }
    form input:valid + button {
      color: white;
      pointer-events: auto; }
  form button {
    width: 5rem;
    background-color: tomato;
    color: rgba(255, 255, 255, 0.7);
    border-radius: calc(3rem - 2 * 4px);
    padding: 4px 1rem;
    -webkit-transition: all cubic-bezier(0.22, 0.61, 0.36, 1) 0.3s;
    transition: all cubic-bezier(0.22, 0.61, 0.36, 1) 0.3s;
    pointer-events: none; }
  form input,
  form button {
    display: none;
    -webkit-transform: scale(0);
            transform: scale(0); }
  form .form__text {
    line-height: calc(3rem - 2 * 4px);
    color: tomato;
    text-align: center;
    padding-right: 1rem;
    padding-left: 1rem; }
  form .form__text--start {
    cursor: pointer; }
  form .form__text--end {
    display: none;
    -webkit-transform: scale(0);
            transform: scale(0); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
